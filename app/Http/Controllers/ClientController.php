<?php

namespace App\Http\Controllers;
use App\Models\Client;
use App\Services\FileService;
use Illuminate\Contracts\Validation\Factory as ValidationFactory;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Laravel\Passport\ClientRepository;
use Laravel\Passport\Http\Controllers\ClientController as ClientPassportController;
use Laravel\Passport\Http\Rules\RedirectRule;
use Laravel\Passport\Passport;

class ClientController extends ClientPassportController
{

    private FileService $fileService;

    public function __construct(
        ClientRepository $clients,
        ValidationFactory $validation,
        RedirectRule $redirectRule
    ) {
        parent::__construct($clients, $validation, $redirectRule);
        $this->fileService = app(FileService::class);
    }

    public function forUser(Request $request)
    {
        $page = $request->get('page');
        $status = $request->get('status');
        $search = $request->get('search');
        $userId = $request->user("api")->getAuthIdentifier();

        $query = Client::query()->where('user_id', $userId);

        if ($status !== 'all') {
            if (!$search) {
                $query->whereIn('status', $status);
            } else {
                $query->where(function ($query) use ($status, $search) {
                    $query->where('status', $status)
                        ->where('name', 'like', '%'. $search . '%');
                });
            }
        } else {
            if ($search) {
                $query->where('name', 'like', '%'. $search . '%');
            }
        }

        $clients = $query->get();

        if (Passport::$hashesClientSecrets) {
            return $clients;
        }
        return $clients->map(function ($item) {
            if($item->status == "pending" || $item->status == "rejected") {
                return $item->makeHidden("secret");
            } else {
                return $item;
            }
        })->forPage((int)$page, 8)->flatten();
    }

    public function store(Request $request) {
        try {
            $this->validation->make($request->all(), [
                'name'         => 'required|max:191',
                'app_link'     => 'required|max:191',
                'redirect'     => ['required', $this->redirectRule],
                'confidential' => 'boolean',
                'description'  => 'required|max:191',
                'logo'         => 'required',
                'logo.*'       => 'mimes:jpeg,bmp,png,jpg|max:2000',
                'collection_id' => 'required'
            ])->validate();
            $logo = $request->file('logo');
            $descriptionImages = collect($request->allFiles())->filter(function ($file, $key) {
                return $key !== 'logo';
            })->toArray();

            $descriptionImagesLink = [];
            if(count($descriptionImages) > 0) {
               $descriptionImagesLink = collect($this->fileService->storeFile($descriptionImages, 'description'))->flatten()->all();
            }
            $client = Client::create([
                'user_id' => $request->user("api")->getAuthIdentifier(),
                'name' => $request->name,
                'app_link' => $request->app_link,
                'secret' => Str::random(40),
                'provider' => "appUsers",
                'redirect' => $request->redirect,
                'personal_access_client' => 0,
                'password_client' => 0,
                'revoked' => false,
                'app_logo' => $this->fileService->storeFile([$logo])[0],
                'description' => $request->description ?? '',
                'back_link' => '',
                'rick_text' => '',
                'doc_link' => $request->document_link ?? '',
                'description_image' => $descriptionImagesLink,
                'youtube_link' => $request->youtube_link ?? '',
                'collection_id' => $request->collection_id ?? 1,
                'type' => 0,
            ]);

            if (Passport::$hashesClientSecrets) {
                return ['plainSecret' => $client->plainSecret] + $client->toArray();
            }
            return \response()->json([
                'message' => "Created successfully",
                'error' => false
            ]);
        } catch (\Exception $e) {
            logger()->error($e->getMessage());
            return \response()->json([
                'error' => true,
                'message' => $e->getMessage()
            ]);
        }
    }

    public function update(Request $request, $clientId)
    {
        return parent::update(
            $request,
            $clientId
        ); // TODO: Change the autogenerated stub
    }

    public function destroy(Request $request, $clientId)
    {
        return parent::destroy(
            $request,
            $clientId
        ); // TODO: Change the autogenerated stub
    }
}
